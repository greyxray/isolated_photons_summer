#!/usr/bin/python
import ROOT
import numpy as np

# This is the code to look into a MC root file

FMCPrt_table = ["DOWN     ",  "DOWN   B ",  "UP       ",  "UP     B ",  "STRANGE  ",  "STRANGEB ",  "CHARM    ",  "CHARM  B ",  "BOTTOM   ",  "BOTTOM B ",  "TOP      ",  "TOP    B ",  "LOW      ",  "LOW    B ",  "HIGH     ",  "HIGH   B ",  "ENEU     ",  "ENEU   B ",  "MUNEU    ",  "MUNEU  B ",  "TAUNEU   ",  "TAUNEU B ",  "E      - ",  "E      + ",  "MU     - ",  "MU     + ",  "TAU    - ",  "TAU    + ",  "GAMMA    ",  "W      + ",  "W      - ",  "Z0       ",  "g        ",  "HIGGS0   ",  "H02      ",  "H03      ",  "HIGGS  + ",  "DD1      ",  "DD1    B ",  "DU0      ",  "DU0    B ",  "DU1      ",  "DU1    B ",  "UU1      ",  "UU1    B ",  "SD0      ",  "SD0    B ",  "SD1      ",  "SD1    B ",  "SU0      ",  "SU0    B ",  "SU1      ",  "SU1    B ",  "PI     + ",  "PI     - ",  "PI0      ",  "ETA      ",  "K      + ",  "K      - ",  "K0       ",  "K0     B ",  "KSHORT   ",  "KLONG    ",  "D      + ",  "D      - ",  "D0       ",  "D0     B ",  "DS     + ",  "DS     - ",  "DS*    + ",  "DS*    - ",  "B      + ",  "B      - ",  "B0       ",  "B0     B ",  "RHO    + ",  "RHO    - ",  "RHO0     ",  "OMEGA    ",  "ETAP     ",  "f0(975)  ",  "a0(980)  ",  "Anti a0(9",  "a0(980)  ",  "PHI      ",  "h1(1170) ",  "b1(1235) ",  "Anti b1(1",  "b1(1235) ",  "A1     + ",  "A1     - ",  "A10      ",  "f2(1270) ",  "eta(1280)",  "f1(1285) ",  "pi(1300) ",  "Anti pi(1",  "pi(1300) ",  "A2     + ",  "A2     - ",  "A20      ",  "f0(1400) ",  "f1(1420) ",  "eta(1430)",  "f2 prime(",  "f1(1530) ",  "f0(1590) ",  "omega 3(1",  "pi 2(1670",  "Anti pi 2",  "pi 2(1670",  "phi(1680)",  "rho 3(169",  "Anti rho ",  "rho 3(169",  "rho(1700)",  "Anti rho(",  "rho(1700)",  "f2(1720) ",  "f2(2010) ",  "f4(2050) ",  "f2(2300) ",  "f2(2340) ",  "ETAC1S   ",  "J-PSI    ",  "CHIC01P  ",  "CHIC11P  ",  "CHIC21P  ",  "PSI2S    ",  "PSI3S    ",  "psi(4040)",  "psi(4160)",  "psi(4415)",  "YPSI1S   ",  "ETAB1S   ",  "CHIB11P  ",  "CHIB21P  ",  "YPSI2S   ",  "CHIB01P  ",  "Chi b 1(2",  "Chi b 2(2",  "YPSI3S   ",  "YPSI4S   ",  "YPSI5S   ",  "Yps(11020",  "K*     + ",  "K*     - ",  "K*0      ",  "K*0    B ",  "K1(1270) ",  "Anti K1(1",  "K1(1270) ",  "Anti K1(1",  "K1(1400) ",  "Anti K1(1",  "K1(1400) ",  "Anti K1(1",  "K*(1415) ",  "Anti K*(1",  "K*(1415) ",  "Anti K*(1",  "K*0(1430)",  "Anti K*0(",  "K*0(1430)",  "Anti K*0(",  "K*2(1430)",  "Anti K*2(",  "K*2(1430)",  "Anti K*2(",  "K*(1715) ",  "Anti K*(1",  "K*(1715) ",  "Anti K*(1",  "K2(1770) ",  "Anti K2(1",  "K2(1770) ",  "Anti K2(1",  "K*3(1780)",  "Anti K*3(",  "K*3(1780)",  "Anti K*3(",  "K*4(2075)",  "Anti K*4(",  "K*4(2075)",  "Anti K*4(",  "D*     + ",  "D*     - ",  "D*0      ",  "D*0    B ",  "P      + ",  "P      - ",  "N        ",  "N      B ",  "LAMBDA   ",  "LAMBDA B ",  "SIGMAU + ",  "SIGMAU - ",  "SIGMA0   ",  "SIGMA0 B ",  "SIGMAD - ",  "SIGMAD + ",  "CASCA0   ",  "CASCA0 B ",  "CASCA  - ",  "CASCA  + ",  "Omega -  ",  "Anti Omeg",  "LAMBC  + ",  "LAMBC  - ",  "CASCC  + ",  "CASCC  - ",  "OMEGC0   ",  "OMEGC0 B ",  "LAMBB0   ",  "LAMBB0 B ",  "N(1440)+ ",  "N(1440)- ",  "N(1440)  ",  "N(1440)B ",  "N(1520)+ ",  "N(1520)- ",  "N(1520)  ",  "N(1520)B ",  "N(1535)+ ",  "N(1535)- ",  "N(1535)  ",  "N(1535)B ",  "N(1650)+ ",  "N(1650)- ",  "N(1650)  ",  "N(1650)B ",  "N(1675)+ ",  "N(1675)- ",  "N(1675)  ",  "N(1675)B ",  "N(1680)+ ",  "N(1680)- ",  "N(1680)  ",  "N(1680)B ",  "N(1700)+ ",  "N(1700)- ",  "N(1700)  ",  "N(1700)B ",  "N(1710)+ ",  "N(1710)- ",  "N(1710)  ",  "N(1710)B ",  "N(1720)+ ",  "N(1720)- ",  "N(1720)  ",  "N(1720)B ",  "N(2190)+ ",  "N(2190)- ",  "N(2190)  ",  "N(2190)B ",  "DELTA 2+ ",  "DELTA 2- ",  "DELTAU + ",  "DELTAU - ",  "DELTA0   ",  "DELTA0 B ",  "DELTAD - ",  "DELTAD + ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "SIGM*U + ",  "SIGM*U - ",  "SIGM*0   ",  "SIGM*0 B ",  "SIGM*D - ",  "SIGM*D + ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "         ",  "CASC*0   ",  "CASC*0 B ",  "CASC*  - ",  "CASC*  + ",  "Xi(1820) ",  "Anti Xi(1",  "Xi(1820) ",  "Anti Xi(1",  "DEUTERON ",  "TRITIUM  ",  "ALPHA    ",  "GEANTINO ",  "G/Z0     ",  "LEPT. 4^ ",  "ANTI LEPT",  "NEUTRINO ",  "ANTI NEUT",  "SIGMC 2+ ",  "SIGMC 2- ",  "SIGMC  + ",  "SIGMC  - ",  "SIGMC0   ",  "SIGMC0 B ",  "CASCCP + ",  "CASCCP - ",  "CASCCP0  ",  "CASCCP0B ",  "CCU++    ",  "ANTI CCU-",  "CCD+     ",  "ANTI CCD-",  "CCS+     ",  "ANTI CCS-",  "CSD0+    ",  "ANTI CSD0",  "SIGMC*2+ ",  "SIGMC*2- ",  "SIGMC* + ",  "SIGMC* - ",  "SIGMC*0  ",  "SIGMC*0B ",  "CASCC* + ",  "CASCC* - ",  "CASCC*0  ",  "CASCC*0B ",  "OMEGC*0  ",  "OMEGC*0B ",  "CCU*++   ",  "ANTI CCU*",  "CCD*+    ",  "ANTI CCD*",  "CCS*+    ",  "ANTI CCS*",  "CCC*++   ",  "ANTI CCC*",  "ETA B    ",  "ETA T    ",  "ETA L    ",  "ETA H    ",  "PHI T    ",  "PHI L    ",  "PHI H    ",  "R0       ",  "Z0       ",  "RHOP     ",  "ANTI RHOP",  "CASCC0   ",  "CASCC0 B ",  "BS0    B ",  "BS0      ",  "BC     - ",  "BC     + ",  "B*     - ",  "B*     + ",  "B*0    B ",  "B*0      ",  "BS*0   B ",  "BS*0     ",  "BC*    - ",  "BC*    + ",  "SIGMBU + ",  "SIGMBU - ",  "SIGMB0   ",  "SIGMB0 B ",  "SIGMBD - ",  "SIGMBD + ",  "CASCB0   ",  "CASCB0 B ",  "CASCBP0  ",  "CASCBP0B ",  "CASCB  - ",  "CASCB  + ",  "CASCBP - ",  "CASCBP + ",  "OMEGB  - ",  "OMEGB  + ",  "BCU    + ",  "BCU    - ",  "BCDP0    ",  "BCDP0  B ",  "BCD0     ",  "BCD0   B ",  "BCDP0    ",  "ANTI BCDP",  "BCS0     ",  "BCS0   B ",  "BCSP0    ",  "BCSP0  B ",  "BCC    + ",  "BCC    - ",  "SIGMB*U+ ",  "SIGMB*U- ",  "SIGMB*0  ",  "SIGMB*0B ",  "SIGMB*D- ",  "SIGMB*D+ ",  "CASCB*0  ",  "CASCB*0B ",  "CASCB* - ",  "CASCB* + ",  "OMEGB* - ",  "OMEGB* + ",  "BCU*   + ",  "BCU*   - ",  "BCD*0    ",  "BCD*0  B ",  "BCS*0    ",  "BCS*0  B ",  "BCC*   + ",  "BCC*   - ",  "LEPTOQUAR",  "LEPTQUARK",  "LEPTQUARK",  "LEPTQUARK",  "CenterMas",  "DCA+     ",  "DCA-     ",  "D**+     ",  "D**-     ",  "DCA0     ",  "DCAB     ",  "D**0     ",  "D**B     ",  "FCA+     ",  "FCA-     ",  "F**+     ",  "F**-     ",  "PSPP     ",  "HARD     ",  "SOFT     ",  "CONE     ",  "HEVY     ",  "CLUS     ",  "SS1      ",  "SS1    B ",  "E0       ",  "OMEGA* - ",  "OMEGA* + ",  "TB*+     ",  "ANTI TB*-",  "T      + ",  "T      - ",  "T0       ",  "T0     B ",  "TS     + ",  "TS     - ",  "SIGMT 2+ ",  "SIGMT 2- ",  "LAMBT  + ",  "LAMBT  - ",  "SIGMT0   ",  "SIGMT0 B ",  "CASCT  + ",  "CASCT  - ",  "CASCT0   ",  "CASCT0 B ",  "OMEGT0   ",  "OMEGT0 B ",  "TC0      ",  "TC0    B ",  "THET1S   ",  "TU  0    ",  "Anti-TU  ",  "TD  +    ",  "Anti-TD  ",  "TS  +    ",  "Anti-TS  ",  "TC  0    ",  "Anti-TC  ",  "TB  +    ",  "Anti-TB  ",  "LU  -    ",  "Anti-LU  ",  "LD  0    ",  "Anti-LD  ",  "LS  0    ",  "Anti-LS  ",  "LC  -    ",  "Anti-LC  ",  "LB  0    ",  "Anti-LB  ",  "LT  -    ",  "Anti-LT  ",  "HU  0    ",  "Anti-HU  ",  "HD  +    ",  "Anti-HD  ",  "HS  +    ",  "Anti-HS  ",  "HC  0    ",  "Anti-HC  ",  "HB  +    ",  "Anti-HB  ",  "HT  0    ",  "Anti-HT  ",  "HL  +    ",  "Anti-HL  ",  "LU *-    ",  "Anti-LU *",  "LD *0    ",  "Anti-LD *",  "LS *0    ",  "Anti-LS *",  "LC *-    ",  "Anti-LC *",  "LB *0    ",  "Anti-LB *",  "LT *-    ",  "Anti-LT *",  "HU *0    ",  "Anti-HU *",  "HD *+    ",  "Anti-HD *",  "HS *+    ",  "Anti-HS *",  "HC *0    ",  "Anti-HC *",  "HB *+    ",  "Anti-HB *",  "HT *0    ",  "Anti-HT *",  "HL *+    ",  "Anti-HL *",  "BCC1+    ",  "Anti-BCC1",  "BBU10    ",  "Anti-BBU1",  "BBD1-    ",  "Anti-BBD1",  "BBS1-    ",  "Anti-BBS1",  "BBC10    ",  "Anti-BBC1",  "TCU1++   ",  "Anti-TCU1",  "TCD1+    ",  "Anti-TCD1",  "TCS1+    ",  "Anti-TCS1",  "TCC1++   ",  "Anti-TCC1",  "TBU1+    ",  "Anti-TBU1",  "TBD10    ",  "Anti-TBD1",  "TBS10    ",  "Anti-TBS1",  "TBC1+    ",  "Anti-TBC1",  "TBB10    ",  "Anti-TBB1",  "TTU1++   ",  "Anti-TTU1",  "TTD1+    ",  "Anti-TTD1",  "TTS1+    ",  "Anti-TTS1",  "TTC1++   ",  "Anti-TTC1",  "TTB1+    ",  "Anti-TTB1",  "LUU1+    ",  "Anti-LUU1",  "LDU10    ",  "Anti-LDU1",  "LDD1-    ",  "Anti-LDD1",  "LSU10    ",  "Anti-LSU1",  "LSD1-    ",  "Anti-LSD1",  "LSS1-    ",  "Anti-LSS1",  "LCU1+    ",  "Anti-LCU1",  "LCD10    ",  "Anti-LCD1",  "LCS10    ",  "Anti-LCS1",  "LCC1+    ",  "Anti-LCC1",  "LBU10    ",  "Anti-LBU1",  "LBD1-    ",  "Anti-LBD1",  "LBS1-    ",  "Anti-LBS1",  "LBC10    ",  "Anti-LBC1",  "LBB1-    ",  "Anti-LBB1",  "LTU1+    ",  "Anti-LTU1",  "LTD10    ",  "Anti-LTD1",  "LTS10    ",  "Anti-LTS1",  "LTC1+    ",  "Anti-LTC1",  "LTB10    ",  "Anti-LTB1",  "LTT1+    ",  "Anti-LTT1",  "LLU10    ",  "Anti-LLU1",  "LLD1-    ",  "Anti-LLD1",  "LLS1-    ",  "Anti-LLS1",  "LLC10    ",  "Anti-LLC1",  "LLB1-    ",  "Anti-LLB1",  "LLT10    ",  "Anti-LLT1",  "HUU1++   ",  "Anti-HUU1",  "HDU1+    ",  "Anti-HDU1",  "HDD10    ",  "Anti-HDD1",  "HSU1+    ",  "Anti-HSU1",  "HSD10    ",  "Anti-HSD1",  "HSS10    ",  "Anti-HSS1",  "HCU1++   ",  "Anti-HCU1",  "HCD1+    ",  "Anti-HCD1",  "HCS1+    ",  "Anti-HCS1",  "HCC1++   ",  "Anti-HCC1",  "HBU1+    ",  "Anti-HBU1",  "HBD10    ",  "Anti-HBD1",  "HBS10    ",  "Anti-HBS1",  "HBC1+    ",  "Anti-HBC1",  "HBB10    ",  "Anti-HBB1",  "HTU1++   ",  "Anti-HTU1",  "HTD1+    ",  "Anti-HTD1",  "HTS1+    ",  "Anti-HTS1",  "HTC1++   ",  "Anti-HTC1",  "HTB1+    ",  "Anti-HTB1",  "HTT1++   ",  "Anti-HTT1",  "HLU1+    ",  "Anti-HLU1",  "HLD10    ",  "Anti-HLD1",  "HLS10    ",  "Anti-HLS1",  "HLC1+    ",  "Anti-HLC1",  "HLB10    ",  "Anti-HLB1",  "HLT1+    ",  "Anti-HLT1",  "HLL10    ",  "Anti-HLL1",  "HHU1++   ",  "Anti-HHU1",  "HHD1+    ",  "Anti-HHD1",  "HHS1+    ",  "Anti-HHS1",  "HHC1++   ",  "Anti-HHC1",  "HHB1+    ",  "Anti-HHB1",  "HHT1++   ",  "Anti-HHT1",  "HHL1+    ",  "Anti-HHL1",  "BSU00    ",  "Anti-BSU0",  "BSD0-    ",  "Anti-BSD0",  "BCU0+    ",  "Anti-BCU0",  "BCD00    ",  "Anti-BCD0",  "BCS00    ",  "Anti-BCS0",  "TDU0+    ",  "Anti-TDU0",  "TSU0+    ",  "Anti-TSU0",  "TSD00    ",  "Anti-TSD0",  "TCU0++   ",  "Anti-TCU0",  "TCD0+    ",  "Anti-TCD0",  "TCS0+    ",  "Anti-TCS0",  "TBU0+    ",  "Anti-TBU0",  "TBD00    ",  "Anti-TBD0",  "TBS00    ",  "Anti-TBS0",  "TBC0+    ",  "Anti-TBC0",  "LDU00    ",  "Anti-LDU0",  "LSU00    ",  "Anti-LSU0",  "LSD0-    ",  "Anti-LSD0",  "LCU0+    ",  "Anti-LCU0",  "LCD00    ",  "Anti-LCD0",  "LCS00    ",  "Anti-LCS0",  "LBU00    ",  "Anti-LBU0",  "LBD0-    ",  "Anti-LBD0",  "LBS0-    ",  "Anti-LBS0",  "LBC00    ",  "Anti-LBC0",  "LTU0+    ",  "Anti-LTU0",  "LTD00    ",  "Anti-LTD0",  "LTS00    ",  "Anti-LTS0",  "LTC0+    ",  "Anti-LTC0",  "LTB00    ",  "Anti-LTB0",  "HDU0+    ",  "Anti-HDU0",  "HSU0+    ",  "Anti-HSU0",  "HSD00    ",  "Anti-HSD0",  "HCU0++   ",  "Anti-HCU0",  "HCD0+    ",  "Anti-HCD0",  "HCS0+    ",  "Anti-HCS0",  "HBU0+    ",  "Anti-HBU0",  "HBD00    ",  "Anti-HBD0",  "HBS00    ",  "Anti-HBS0",  "HBC0+    ",  "Anti-HBC0",  "HTU0++   ",  "Anti-HTU0",  "HTD0+    ",  "Anti-HTD0",  "HTS0+    ",  "Anti-HTS0",  "HTC0++   ",  "Anti-HTC0",  "HTB0+    ",  "Anti-HTB0",  "HLU0+    ",  "Anti-HLU0",  "HLD00    ",  "Anti-HLD0",  "HLS00    ",  "Anti-HLS0",  "HLC0+    ",  "Anti-HLC0",  "HLB00    ",  "Anti-HLB0",  "HLT0+    ",  "Anti-HLT0",  "BBU*0    ",  "Anti-BBU*",  "BBD*-    ",  "Anti-BBD*",  "BBS*-    ",  "Anti-BBS*",  "BBC*0    ",  "Anti-BBC*",  "BBB*-    ",  "Anti-BBB*",  "TUU*++   ",  "Anti-TUU*",  "TDU*+    ",  "Anti-TDU*",  "TDD*0    ",  "Anti-TDD*",  "TSU*+    ",  "Anti-TSU*",  "TSD*0    ",  "Anti-TSD*",  "TSS*0    ",  "Anti-TSS*",  "TCU*++   ",  "Anti-TCU*",  "TCD*+    ",  "Anti-TCD*",  "TCS*+    ",  "Anti-TCS*",  "TCC*++   ",  "Anti-TCC*",  "TBU*+    ",  "Anti-TBU*",  "TBD*0    ",  "Anti-TBD*",  "TBS*0    ",  "Anti-TBS*",  "TBC*+    ",  "Anti-TBC*",  "TBB*0    ",  "Anti-TBB*",  "TTU*++   ",  "Anti-TTU*",  "TTD*+    ",  "Anti-TTD*",  "TTS*+    ",  "Anti-TTS*",  "TTC*++   ",  "Anti-TTC*",  "TTB*+    ",  "Anti-TTB*",  "TTT*++   ",  "Anti-TTT*",  "LUU*+    ",  "Anti-LUU*",  "LDU*0    ",  "Anti-LDU*",  "LDD*-    ",  "Anti-LDD*",  "LSU*0    ",  "Anti-LSU*",  "LSD*-    ",  "Anti-LSD*",  "LSS*-    ",  "Anti-LSS*",  "LCU*+    ",  "Anti-LCU*",  "LCD*0    ",  "Anti-LCD*",  "LCS*0    ",  "Anti-LCS*",  "LCC*+    ",  "Anti-LCC*",  "LBU*0    ",  "Anti-LBU*",  "LBD*-    ",  "Anti-LBD*",  "LBS*-    ",  "Anti-LBS*",  "LBC*0    ",  "Anti-LBC*",  "LBB*-    ",  "Anti-LBB*",  "LTU*+    ",  "Anti-LTU*",  "LTD*0    ",  "Anti-LTD*",  "LTS*0    ",  "Anti-LTS*",  "LTC*+    ",  "Anti-LTC*",  "LTB*0    ",  "Anti-LTB*",  "LTT*+    ",  "Anti-LTT*",  "LLU*0    ",  "Anti-LLU*",  "LLD*-    ",  "Anti-LLD*",  "LLS*-    ",  "Anti-LLS*",  "LLC*0    ",  "Anti-LLC*",  "LLB*-    ",  "Anti-LLB*",  "LLT*0    ",  "Anti-LLT*",  "LLL*-    ",  "Anti-LLL*",  "HUU*++   ",  "Anti-HUU*",  "HDU*+    ",  "Anti-HDU*",  "HDD*0    ",  "Anti-HDD*",  "HSU*+    ",  "Anti-HSU*",  "HSD*0    ",  "Anti-HSD*",  "HSS*0    ",  "Anti-HSS*",  "HCU*++   ",  "Anti-HCU*",  "HCD*+    ",  "Anti-HCD*",  "HCS*+    ",  "Anti-HCS*",  "HCC*++   ",  "Anti-HCC*",  "HBU*+    ",  "Anti-HBU*",  "HBD*0    ",  "Anti-HBD*",  "HBS*0    ",  "Anti-HBS*",  "HBC*+    ",  "Anti-HBC*",  "HBB*0    ",  "Anti-HBB*",  "HTU*++   ",  "Anti-HTU*",  "HTD*+    ",  "Anti-HTD*",  "HTS*+    ",  "Anti-HTS*",  "HTC*++   ",  "Anti-HTC*",  "HTB*+    ",  "Anti-HTB*",  "HTT*++   ",  "Anti-HTT*",  "HLU*+    ",  "Anti-HLU*",  "HLD*0    ",  "Anti-HLD*",  "HLS*0    ",  "Anti-HLS*",  "HLC*+    ",  "Anti-HLC*",  "HLB*0    ",  "Anti-HLB*",  "HLT*+    ",  "Anti-HLT*",  "HLL*0    ",  "Anti-HLL*",  "HHU*++   ",  "Anti-HHU*",  "HHD*+    ",  "Anti-HHD*",  "HHS*+    ",  "Anti-HHS*",  "HHC*++   ",  "Anti-HHC*",  "HHB*+    ",  "Anti-HHB*",  "HHT*++   ",  "Anti-HHT*",  "HHL*+    ",  "Anti-HHL*",  "HHH*++   ",  "Anti-HHH*",  "specflav ",  "rndnflav ",  "phasespa ",  "c-hadron ",  "b-hadron ",  "t-hadron ",  "l-hadron ",  "h-hadron ",  "Wvirt+   ",  "dquark   ",  "cluster  ",  "string   ",  "indep.   ",  "CMshower ",  "SPHEaxis ",  "THRUaxis ",  "CLUSjet  ",  "CELLjet  ",  "table    ",  "pi_diffr+",  "n_diffr  ",  "p_diffr+ ",  "Wvirt-   ",  "pi_diffr-",  "n_diffr a",  "p_diffr- ",  "T*     + ",  "T*     - ",  "Missing c",  "GLUON    ",  "CU0      ",  "CU1      ",  "CD0      ",  "CD1      ",  "CS0      ",  "CS1      ",  "CC1      ",  "SIGMA  - ",  "SIGNEU   ",  "CCU   2+ ",  "CCD    + ",  "CCS    + ",  "CCU*  2+ ",  "CCD*   + ",  "CCS*   + ",  "CCC*  2+ ",  "T*0      ",  "TS*    + ",  "TC*0     ",  "ETAT1S   ",  "THET2S   ",  "THET3S   ",  "THET4S   ",  "THET5S   ",  "CHIT01P  ",  "CHIT11P  ",  "CHIT21P  ",  "SIGMT  + ",  "CASCTP + ",  "CASCTP0  ",  "TCU   2+ ",  "TCUP  2+ ",  "TCD    + ",  "TCDP   + ",  "TCS    + ",  "TCSP   + ",  "TCC   2+ ",  "SIGMT*2+ ",  "SIGMT* + ",  "SIGMT*0  ",  "CASCT* + ",  "CASCT*0  ",  "OMEGT*0  ",  "TCU*  2+ ",  "TCD*   + ",  "TCS*   + ",  "TCC*  2+ ",  "L      + ",  "L0       ",  "LS0      ",  "LC     + ",  "L*     + ",  "L*0      ",  "LS*0     ",  "LC*    + ",  "SIGMLU + ",  "SIGML0   ",  "LAMBL0   ",  "SIGMLD - ",  "CASCL0   ",  "CASCLP0  ",  "CASCL  - ",  "CASCLP - ",  "OMEGL  - ",  "LCU    + ",  "LCUP   + ",  "LCD0     ",  "LCDP0    ",  "LCS0     ",  "LCSP0    ",  "LCC    + ",  "SIGML*U+ ",  "SIGML*0  ",  "SIGML*D- ",  "CASCL*0  ",  "CASCL* - ",  "OMEGL* - ",  "LCU*   + ",  "LCC*   + ",  "H0       ",  "H      + ",  "HS     + ",  "HC0      ",  "H*0      ",  "H*     + ",  "HS*    + ",  "HC*0     ",  "SIGMH 2+ ",  "SIGMH  + ",  "LAMBH  + ",  "SIGMH0   ",  "CASCH  + ",  "CASCHP + ",  "CASCH0   ",  "CASCHP0  ",  "OMEGH0   ",  "HCU   2+ ",  "HCUP  2+ ",  "HCD    + ",  "HCDP   + ",  "HCS    + ",  "HCSP   + ",  "HCC   2+ ",  "SIGMH*2+ ",  "SIGMH* + ",  "SIGMH*0  ",  "CASCH* + ",  "CASCH*0  ",  "OMEGH*0  ",  "HCU*  2+ ",  "HCD*   + ",  "HCS*   + ",  "HCC*  2+ ",  "CU0    B ",  "CU1    B ",  "CD0    B ",  "CD1    B ",  "CS0    B ",  "CS1    B ",  "CC1    B ",  "SIGMA  + ",  "SIGNEU B ",  "HIGGS  - ",  "KSHORT B ",  "KLONG  B ",  "CCU   2- ",  "CCD    - ",  "CCS    - ",  "CCU*  2- ",  "CCD*   - ",  "CCS*   - ",  "CCC*  2- ",  "T*0    B ",  "TS*    - ",  "TC*0   B ",  "SIGMT  - ",  "CASCTP - ",  "CASCTP0B ",  "TCU   2- ",  "TCUP  2- ",  "TCD    - ",  "TCDP   - ",  "TCS    - ",  "TCSP   - ",  "TCC   2- ",  "SIGMT*2- ",  "SIGMT* - ",  "SIGMT*0B ",  "CASCT* - ",  "CASCT*0B ",  "OMEGT*0B ",  "TCU*  2- ",  "TCD*   - ",  "TCS*   - ",  "TCC*  2- ",  "L      - ",  "L0     B ",  "LS0    B ",  "LC     - ",  "L*     - ",  "L*0    B ",  "LS*0   B ",  "LC*    - ",  "SIGMLU - ",  "SIGML0 B ",  "LAMBL0 B ",  "SIGMLD + ",  "CASCL0 B ",  "CASCLP0B ",  "CASCL  + ",  "CASCLP + ",  "OMEGL  + ",  "LCU    - ",  "LCUP   - ",  "LCD0   B ",  "LCDP0  B ",  "LCS0   B ",  "LCSP0  B ",  "LCC    - ",  "SIGML*U- ",  "SIGML*0B ",  "SIGML*D+ ",  "CASCL*0B ",  "CASCL* + ",  "OMEGL* + ",  "LCU*   - ",  "LCD*0  B ",  "LCS*0  B ",  "LCC*   - ",  "H0     B ",  "H      - ",  "HS     - ",  "HC0    B ",  "H*0    B ",  "H*     - ",  "HS*    - ",  "HC*0   B ",  "SIGMH 2- ",  "SIGMH  - ",  "LAMBH  - ",  "SIGMH0 B ",  "CASCH  - ",  "CASCHP - ",  "CASCH0 B ",  "CASCHP0B ",  "OMEGH0 B ",  "HCU   2- ",  "HCUP  2- ",  "HCD    - ",  "HCDP   - ",  "HCS    - ",  "HCSP   - ",  "HCC   2- ",  "SIGMH*2- ",  "SIGMH* - ",  "SIGMH*0B ",  "CASCH* - ",  "CASCH*0B ",  "OMEGH*0B ",  "HCU*  2- ",  "HCD*   - ",  "HCS*   - ",  "HCC*  2- ",  "pi_diffr0",  "NUTERMINO",  "EMTERMINO",  "D*_0   + ",  "D*_0   - ",  "DL_1   + ",  "DL_1   - ",  "D*_00    ",  "D*_00  B ",  "DL_10    ",  "DL_10  B ",  "D*_S0  + ",  "D*_S0  - ",  "DL_S1  + ",  "DL_S1  - ",  "B*_00    ",  "B*_00  B ",  "BL_10    ",  "BL_10  B ",  "B*_0   + ",  "B*_0   - ",  "BL_1   + ",  "BL_1   - ",  "B*_S00   ",  "B*_S00 B ",  "BL_S10   ",  "BL_S10 B ",  "B*_C0  + ",  "B*_C0  - ",  "BL_C1  + ",  "BL_C1  - ",  "B*_20    ",  "B*_20  B ",  "B*_2   + ",  "B*_2   - ",  "B*_S20   ",  "B*_S20 B ",  "BH_10    ",  "BH_10  B ",  "BH_1   + ",  "BH_1   - ",  "BH_S10   ",  "BH_S10 B ",  "BH_C1  + ",  "BH_C1  - ",  "KDH_20   ",  "KDH_20 B ",  "KDH_2  + ",  "KDH_2  - ",  "FH_1     ",  "FH_00    "]

def main():
    # Very clever to keep this line while you want to draw something
    # ROOT.gROOT.SetBatch() 
    infile = "my_data0405e_test_zero.root"
    rfile = ROOT.TFile.Open(infile)
    branchName =  "Nfmckin"#"Fmck_id" #   Int_t           Nfmckin; - Number of hadrnos in FMCkin
                           #   Int_t           Idfmckin[500];   //[Nfmckin] - fmckin_fmcprt of hadron (hadron type)
                           #   Float_t         Ppfmckin[500][4];   //[Nfmckin]

    tree = rfile.Get("orange") # will get the tree
    branch = tree.GetListOfBranches() #will get the branch
    list_of_branch_names = [b.GetName() for b in branch]
    print  "total entries: ", tree.GetEntries()
    t1.Draw(hist_name, hist_name+ " < 350")

    h = ROOT.TH1D("Siq2el[0]", "Nfmckin hist", 360, 0, 360)
    h.Draw()
    print >>f1, h.GetBinWidth(1)
    ROOT.gROOT.FindObject('c1').Update() # Otherwise it will show empty canvas
    raw_input('Press [Enter] to continue ...')

    ####
    files = [infile]
    chain = ROOT.TChain("orange")
    for f in files: chain.Add(f)
    #loop_over_chain(chain)

def loop_over_chain(chain):
    f1=open('QQ_MC_1_event.txt', 'w+')#f1.write('This is a test')
    h = ROOT.TH1D("hNfmckin", "Nfmckin hist", 360, 0, 360)

    
    for event in chain:
        print >>f1, "event number:", 1

        print >>f1, "\nBlock: QCDPAR"
        mckin = np.resize(event.Ppart, (event.Nppart, 4))
        vectos = [ROOT.TLorentzVector(*i) for i in mckin]# *i - each element of i is understood as separate element
        tot = reduce(lambda x, y: x + y, vectos)
        "WARNING!: the Ppart is not a 2D array! divided on Nppart x 4 vectors"
        print >>f1, "4-momenta sum over all partons:", tot.Px(), tot.Py(), tot.Pz(), tot.E()
        h.Fill(chain.Nppart) 
        print >>f1, "N:", event.Nppart
        for i_part in range(event.Nppart):
          print >>f1, "Idpart:", event.Idpart[i_part],"(", FMCPrt_table[event.Idpart[i_part] - 1], ")", "P: [", event.Ppart[i_part * 4 + 0], "," , event.Ppart[i_part * 4 + 1], ",", event.Ppart[i_part * 4 + 2], "," , event.Ppart[i_part * 4 + 3], "]"

        print >>f1, "\nBlock: QCDHAD"
        # TODO: check if this is the correct shape. This might be (4, event.Nfmckin)
        # mckin = np.ndarray( (event.Nfmckin, 4), dtype=np.float32, buffer=event.Ppfmckin)
        mckin = np.resize(event.Ppfmckin, (event.Nfmckin, 4))
        vectos = [ROOT.TLorentzVector(*i) for i in mckin]# *i - each element of i is understood as separate element
        tot = reduce(lambda x, y: x + y, vectos)
        "WARNING!: the Ppfmckin is not a 2D array! divided on Nfmckin x 4 vectors"
        print >>f1, "4-momenta sum over all hadrons:", tot.Px(), tot.Py(), tot.Pz(), tot.E()
        h.Fill(chain.Nfmckin) 
        print >>f1, "N:", event.Nfmckin
        for i_hadron in range(event.Nfmckin):
          print >>f1, "Idfmckin:", event.Idfmckin[i_hadron],"(", FMCPrt_table[event.Idfmckin[i_hadron] - 1], ")", "P: [", event.Ppfmckin[i_hadron * 4 + 0], "," , event.Ppfmckin[i_hadron * 4 + 1], ",", event.Ppfmckin[i_hadron * 4 + 2], "," , event.Ppfmckin[i_hadron * 4 + 3], "]"

        print >>f1, "\nBlock: FMCKin"
        print >>f1, "N:", event.Npart
        print >>f1, "FMCKin_ID==Part_id of the scattered lepton:", event.Idlepton
        print >>f1, "FMCKin_ID==Part_id of the radiated photon:", event.Idphoton
        mckin = np.resize(event.Part_p, (event.Npart, 4))
        vectos = [ROOT.TLorentzVector(*i) for i in mckin]# *i - each element of i is understood as separate element
        tot = reduce(lambda x, y: x + y, vectos)
        "WARNING!: the Part_p is not a 2D array! divided on Npart x 4 vectors"
        print >>f1, "4-momenta sum over all hadrons in FMCKin:", tot.Px(), tot.Py(), tot.Pz(), tot.E()
        for i_hadron in range(event.Npart):
          print >>f1, "Part_id:", event.Part_id[i_hadron], "Part_prt:",  event.Part_prt[i_hadron],"(", FMCPrt_table[event.Part_prt[i_hadron] - 1], ")", "P: [", event.Part_p[i_hadron * 4 + 0], "," , event.Part_p[i_hadron * 4 + 1], ",", event.Part_p[i_hadron * 4 + 2], "," , event.Part_p[i_hadron * 4 + 3], "]"

        print >>f1, "\nBlock: FMCKIN1"
        print >>f1, "Fmck_nkin:", event.Fmck_nkin, "-  number of entries in FMCKin (FMCKin)"
        print >>f1, "Fmck_q2:", event.Fmck_q2, "Fmck_w:", event.Fmck_w, "Fmck_xg:", event.Fmck_xg, "-  derived from exchange photon"

        
        print >>f1, "\nBlock: FMCKin2"
        momenta_of_stable = [0, 0, 0, 0]
        print >>f1, "Fmck_nstor:", event.Fmck_nstor
        mckin = np.resize(event.Ppfmckin, (event.Nfmckin, 4))
        vectos = [ROOT.TLorentzVector(*i) for i in mckin]# *i - each element of i is understood as separate element
        tot = reduce(lambda x, y: x + y, vectos)
        "WARNING!: the Ppfmckin is not a 2D array! divided on Nfmckin x 4 vectors"
        print >>f1, "4-momenta sum over all hadrons:", tot.Px(), tot.Py(), tot.Pz(), tot.E()
        for part in range(event.Fmck_nstor):
          n = event.Fmck_prt[part]
          if event.Fmck_prt[part]> 1086:
            n = event.Fmck_prt[part] - 994
          print >>f1, "Fmck_id:", event.Fmck_id[part], "Fmck_prt:",  event.Fmck_prt[part],"(", FMCPrt_table[ n - 1], ")"
          print >>f1, "\tP: [", event.Fmck_px[part], "," , event.Fmck_py[part], "," , event.Fmck_pz[part], "," , event.Fmck_e[part], "]"
          print >>f1, "\t", "Fmck_isthep:", event.Fmck_isthep[part], "Fmck_daug:", event.Fmck_daug[part]
          if event.Fmck_isthep[part]%10000 == 1:
            momenta_of_stable[0] += event.Fmck_px[part]
            momenta_of_stable[1] += event.Fmck_py[part]
            momenta_of_stable[2] += event.Fmck_pz[part]
            momenta_of_stable[3] += event.Fmck_e[part]
        print >>f1, "===> The summation over stable particles gives 4-momenta: [", momenta_of_stable[0], ",", momenta_of_stable[1], ",", momenta_of_stable[2], ",", momenta_of_stable[3], "]"
        
        

        break



    h.Draw()
    print >>f1, h.GetBinWidth(1)
    ROOT.gROOT.FindObject('c1').Update() # Otherwise it will show empty canvas
    raw_input('Press [Enter] to continue ...')


if __name__ == '__main__':
    main()
